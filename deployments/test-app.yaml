apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: rollout-bluegreen
spec:
  replicas: 10
  revisionHistoryLimit: 5
  minReadySeconds: 30
  selector:
    matchLabels:
      app: rollout-bluegreen
  template:
    metadata:
      labels:
        app: rollout-bluegreen
    spec:
      containers:
      - name: rollouts-demo
        image: argoproj/rollouts-demo:red
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
  strategy:
    blueGreen:
      # Name of the service that the rollout modifies as the active service.
      activeService: rollout-bluegreen-active
      # Name of the service that the rollout modifies as the preview service.
      previewService: rollout-bluegreen-preview 
      # The number of replicas to run under the preview service before the switchover. Once the rollout is resumed the new replicaset will be full scaled up before the switch occurs +optional
      previewReplicaCount: 2
      # Indicates if the rollout should automatically promote the new ReplicaSet to the active service or enter a paused state. If not specified, the default value is true. +optional
      autoPromotionEnabled: false
      # Adds a delay before scaling down the previous replicaset. If omitted, the Rollout waits 30 seconds before scaling down the previous ReplicaSet. A minimum of 30 seconds is recommended to ensure IP table propagation across the nodes in a cluster. See https://github.com/argoproj/argo-rollouts/issues/19#issuecomment-476329960 for more information
      scaleDownDelaySeconds: 30
    canary:
      # CanaryService holds the name of a service which selects pods with canary version and don't select any pods with stable version. +optional
      canaryService: rollout-bluegreen-preview
      # The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total pods at the start of update (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. By default, a fixed value of 1 is used. Example: when this is set to 30%, the old RC can be scaled down by 30% immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that at least 70% of original number of pods are available at all times during the update. +optional
      maxUnavailable: 1
      steps:
        # Sets the ratio of new replicasets to 20%
      - setWeight: 100 

---
kind: Service
apiVersion: v1
metadata:
  name: rollout-bluegreen-active
spec:
  selector:
    app: rollout-bluegreen
  type: NodePort
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080

---
kind: Service
apiVersion: v1
metadata:
  name: rollout-bluegreen-preview
spec:
  selector:
    app: rollout-bluegreen
  type: NodePort
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: rollout-bluegreen-active-ingress
  annotations:
    kubernetes.io/ingress.global-static-ip-name: rollout-bluegreen-active
spec:
  rules:
  - http:
      paths:
      - path: /*
        backend:
          serviceName: rollout-bluegreen-active
          servicePort: 80
  backend:
    serviceName: rollout-bluegreen-active
    servicePort: 80


---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: rollout-bluegreen-preview-ingress
  annotations:
    kubernetes.io/ingress.global-static-ip-name: rollout-bluegreen-preview
spec:
  rules:
  - http:
      paths:
      - path: /*
        backend:
          serviceName: rollout-bluegreen-preview
          servicePort: 80
  backend:
    serviceName: rollout-bluegreen-preview
    servicePort: 80



