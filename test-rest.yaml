apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-rest-deployment
  labels:
    app: test-rest
spec:
  replicas: 5
  revisionHistoryLimit: 5
  minReadySeconds: 30
  selector:
    matchLabels:
      app: test-rest
  template:
    metadata:
      labels:
        app: test-rest
    spec:
      containers:
        - name: test-rest
          image: gcr.io/bachelor-2020/test-rest:v1.15
          ports:
            - containerPort: 8080
          env:
            # These secrets are required to start the pod.
            # [START cloudsql_secrets]
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: db-secrets
                  key: DB_HOST
            - name: DB_PORT
              valueFrom:
                secretKeyRef:
                  name: db-secrets
                  key: DB_PORT
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: db-secrets
                  key: DB_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-secrets
                  key: DB_PASSWORD
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: db-secrets
                  key: DB_NAME
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: db-secrets
                  key: DB_NAME
            # [END cloudsql_secrets]
        # [START proxy_container]
        - name: cloudsql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:1.16
          command: ["/cloud_sql_proxy",
                    "-instances=bachelor-2020:europe-west1:terraform-20200303173438591800000001=tcp:5432",
                    # If running on a VPC, the Cloud SQL proxy can connect via Private IP. See:
                    # https://cloud.google.com/sql/docs/mysql/private-ip for more info.
                    # "-ip_address_types=PRIVATE",
                    "-credential_file=/secrets/cloudsql/proxyCreds.json"]
          # [START cloudsql_security_context]
          securityContext:
            runAsUser: 2  # non-root user
            allowPrivilegeEscalation: false
          # [END cloudsql_security_context]
          volumeMounts:
            - name: cloudsql-instance-credentials
              mountPath: /secrets/cloudsql
              readOnly: true
        # [END proxy_container]
      # [START volumes]
      volumes:
        - name: cloudsql-instance-credentials
          secret:
            secretName: cloudsql-instance-credentials
      # [END volumes]
---
kind: Service
apiVersion: v1
metadata:
  name: test-rest
spec:
  selector:
    app: test-rest
  type: NodePort
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080


---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: test-rest-ingress
  annotations:
    kubernetes.io/ingress.global-static-ip-name: test-rest
spec:
  backend:
    serviceName: test-rest
    servicePort: 80



